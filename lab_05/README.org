CSCI 136 - Lab 5

* Lab 5 Pre-lab setup and Notes

For this lab, you will have to use:
- at least three .cpp files.
  - main.cpp (the driver)
  - tests.cpp (doctest test driver)
  - funcs.cpp (the functions requested in the lab
- at least one .h file
  - funcs.h

You might have additional or different  .cpp and .h files if you break out the tasks
into separate files instead of just *funcs.cpp* and *funcs.h* but you
must have *main.cpp* and *tests.cpp*.

You will also need a *Makefile* with the first target being
*main*. This will build an executable named *main* which can be run
(./main). When run it should output results from all the tasks with
hard coded input.

You will also need a target *tests* that will build an executable
named *tests*. This will run all the *doctest* tests.

You should have sufficient tests to show that what works. Tests should
exist but fail when a task isn't completed or working.

*Before the lab* you should set up your repo complete with
Makefile. Set up a dummy project. You should be able to run *make*,
*make tests* and run the executables correctly before you start the
lab. During the lab you should only have to add functions for the
tasks and the related tests.

* Lab 5. Functions and Prime Numbers
  :PROPERTIES:
  :CUSTOM_ID: lab-5-functions-and-prime-numbers
  :END:

[[https://i.imgur.com/xCJ6OFq.jpg]]

** Introduction
   :PROPERTIES:
   :CUSTOM_ID: introduction
   :END:

A *function* is a named sequence of instructions that performs a
specific task and returns the result of its computation. Once defined,
it can be then *called* in your program wherever that particular task
should be performed.

A function can receive zero or more arguments. For example, consider a
function =sum=, which receives three arguments, here named =a=, =b=, and
=c=, and returns their sum:

#+BEGIN_EXAMPLE
    int sum(int a, int b, int c) { 
        return a + b + c;        
    }
#+END_EXAMPLE

To execute (or *call*) a function, you must supply its arguments. For
example, if you want to compute the sum of 500, 600, and 700, you can
write: =sum(500, 600, 700)=.

*** A complete program example:
    :PROPERTIES:
    :CUSTOM_ID: a-complete-program-example
    :END:

#+BEGIN_EXAMPLE
    #include <iostream>

    using namespace std;

    /* Defining a function that computes the sum of three integers */
    int sum(int a, int b, int c) { 
        return a + b + c;          
    }

    int main() {
        // We call it with the actual arguments 1, 20, 300,
        // and save the result in a variable x
        int x = sum(1, 20, 300);  
        cout << x << endl;                     // Prints 321
    }
#+END_EXAMPLE

*** Let's define a function that computes the maximum of two integers:
    :PROPERTIES:
    :CUSTOM_ID: lets-define-a-function-that-computes-the-maximum-of-two-integers
    :END:

#+BEGIN_EXAMPLE
    /* Returns the maximum of two arguments */
    int max2(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }
#+END_EXAMPLE

Then one can find the maximum of thee integers, for example, like this:

#+BEGIN_EXAMPLE
    max2( max2(135, 8763), 500 )   // would return 8763
#+END_EXAMPLE

** Execution of a function call
   :PROPERTIES:
   :CUSTOM_ID: execution-of-a-function-call
   :END:

[[https://i.imgur.com/1NZjPha.png]]

** Task A. Is divisible?
   :PROPERTIES:
   :CUSTOM_ID: task-a-is-divisible
   :END:

Write a program =numbers.cpp= that defines a function

#+BEGIN_EXAMPLE
    bool isDivisibleBy(int n, int d);
#+END_EXAMPLE

If =n= is divisible by =d=, the function should return =true=, otherwise
return =false=.

*** For example:
    :PROPERTIES:
    :CUSTOM_ID: for-example
    :END:

#+BEGIN_EXAMPLE
    isDivisibleBy(100, 25) == true
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    isDivisibleBy(35, 17) == false
#+END_EXAMPLE

The program should also have a =main= function that tests your code. For
example, it can ask the user to input two integer numbers and print
=Yes= if the first number is divisible by the second, otherwise print
=No=.

** Task B. Is a prime?
   :PROPERTIES:
   :CUSTOM_ID: task-b-is-a-prime
   :END:

A *prime* number is an integer greater or equal to 2 that is only
divisible by 1 and by itself. The first few primes are: 2, 3, 5, 7, 11,
13, 17, 19, 23, 29, 31, 37, 41, 43, 47 ...

#+BEGIN_QUOTE
  */N/ is a prime* if and only if *it is not divisible* evenly by any of
  the numbers from 2 to /N/−1. Let's implement this decision as a
  function.
#+END_QUOTE

In the same program =numbers.cpp=, add a function

#+BEGIN_EXAMPLE
    bool isPrime(int n);
#+END_EXAMPLE

The function should return =true= if =n= is a prime, otherwise return
=false=. Change the =main= function to test your new code.

** Task C. Next prime
   :PROPERTIES:
   :CUSTOM_ID: task-c-next-prime
   :END:

Add a function

#+BEGIN_EXAMPLE
    int nextPrime(int n);
#+END_EXAMPLE

that returns the smallest prime greater than =n=.

*** For example:
    :PROPERTIES:
    :CUSTOM_ID: for-example-1
    :END:

#+BEGIN_EXAMPLE
    nextPrime(14) == 17
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    nextPrime(17) == 19
#+END_EXAMPLE

Change the =main= function to test the new code.

** Task D. Count primes in range
   :PROPERTIES:
   :CUSTOM_ID: task-d-count-primes-in-range
   :END:

Add a function

#+BEGIN_EXAMPLE
    int countPrimes(int a, int b);
#+END_EXAMPLE

that returns the number of prime numbers in the interval /a ≤ x ≤ b/.
Change the =main= function to test the new code.

** Task E. Is a twin prime?
   :PROPERTIES:
   :CUSTOM_ID: task-e-is-a-twin-prime
   :END:

A prime number /N/ is called a *twin prime* if either /N/-2 or /N/+2 (or
both of them) is also a prime.\\
For example, a prime 17 is a twin prime, because 17+2 = 19 is a prime as
well.\\
The first few twin primes are: 3, 5, 7, 11, 13, 17, 19, 29, 31 ...

Add a function

#+BEGIN_EXAMPLE
    bool isTwinPrime(int n);
#+END_EXAMPLE

that determines whether or not its argument is a twin prime. Change the
=main= function to test the new code.

** Task F. Next twin prime
   :PROPERTIES:
   :CUSTOM_ID: task-f-next-twin-prime
   :END:

Add a function

#+BEGIN_EXAMPLE
    int nextTwinPrime(int n);
#+END_EXAMPLE

that returns the smallest twin prime greater than =n=. Change the =main=
function to test the new code.

** Task G. Largest twin prime in range
   :PROPERTIES:
   :CUSTOM_ID: task-g-largest-twin-prime-in-range
   :END:

Add a function

#+BEGIN_EXAMPLE
    int largestTwinPrime(int a, int b);
#+END_EXAMPLE

that returns the largest twin prime in the range /a ≤ N ≤ b/.\\
If there is no twin primes in range, then return =-1=.

*** For example:
    :PROPERTIES:
    :CUSTOM_ID: for-example-2
    :END:

#+BEGIN_EXAMPLE
    largestTwinPrime(5, 18) == 17
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    largestTwinPrime(1, 31) == 31
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    largestTwinPrime(14, 16) == -1
#+END_EXAMPLE

Change the =main= function to test the new code.

** How to submit your programs.
   :PROPERTIES:
   :CUSTOM_ID: how-to-submit-your-programs
   :END:

*** Each program should be submitted through Gradescope.
    :PROPERTIES:
    :CUSTOM_ID: each-program-should-be-submitted-through-gradescope
    :END:

Write separate programs for each part of the assignment.\\
Submit only the source code (.cpp) files, not the compiled
executables.\\
Each program should start with a comment that contains your name and a
short program description, for example:

#+BEGIN_EXAMPLE
    /*
    Author: your name
    Course: CSCI-136
    Instructor: their name
    Assignment: title, e.g., Lab1A

    Here, briefly, at least in one or a few sentences
    describe what the program does.
    */
#+END_EXAMPLE

\\
