CSCI 136 - Lab 4

* Lab 4. Printing Shapes
** Overall notes:
For this lab, instead of separate programs, for each task, write a
function using the name specified for the file as the function name
and instead of user input, use parameters. For example, for task A the
function would be:

#+BEGIN_SRC C++
string box(int width, int height){
// your code goes here

}

#+END_SRC

Each function should build and return a string (embedding \n for each newline).


Your project must use a *Makefile*. Just typing *make* will build an
exeutable named *main* which will call all of the functions to prove
they work and print out the results.

You should have at least two cpp files. One should be named *main.cpp*
and include your main function and the other(s) should include the
functions used for the assignment.

The main function in this lab should call each function and print the
results (along with a description of what's happening) to show
that the assigment is correct. 

There should be no keyboard input for this project.

*Note that the examples are for the lab done by the other sections
that does use keybaord input.*

  :PROPERTIES:
  :CUSTOM_ID: lab-4-printing-shapes
  :END:

[[https://i.imgur.com/mbfkIep.gif]]



** Task A. Box
   :PROPERTIES:
   :CUSTOM_ID: task-a-box
   :END:

Write a function =box= that takes as parameters two integers, =width=
and =height= and returns a string representing a solid rectangular box
of the requested size using asterisks.


*** Example:
    :PROPERTIES:
    :CUSTOM_ID: example
    :END:

#+BEGIN_EXAMPLE
    Input width: 7
    Input height: 4

    Shape:
    *******
    *******
    *******
    *******
#+END_EXAMPLE

*** Hint:
    :PROPERTIES:
    :CUSTOM_ID: hint
    :END:

- First find how to print one row of stars (print the asterisk character
  =width= times followed by end-of-line).
- Then, once you know how to print one line of stars, repeat it =height=
  times (using a loop).

** Task B. Checkerboard
   :PROPERTIES:
   :CUSTOM_ID: task-b-checkerboard
   :END:

Write a function =checkerboard= that takes two integer parameters =width=
and =height= and returns a string representing a rectangular checkerboard of the requested size
using asterisks and spaces (alternating).

*** Example:
    :PROPERTIES:
    :CUSTOM_ID: example-1
    :END:

#+BEGIN_EXAMPLE
    Input width: 11
    Input height: 6

    Shape:
    * * * * * *
     * * * * * 
    * * * * * *
     * * * * *
    * * * * * *
     * * * * *
#+END_EXAMPLE

*** Hint:
    :PROPERTIES:
    :CUSTOM_ID: hint-1
    :END:

You used nested loops in the previous task that looked probably like

#+BEGIN_EXAMPLE
    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {

            ...
        
        }
    }
#+END_EXAMPLE

Inside the loops, you can add an =if= statement that will be
conditionally printing asterisk =*= or =(space)= depending on the
coordinates =row= and =col=.

** Task C. Cross
   :PROPERTIES:
   :CUSTOM_ID: task-c-cross
   :END:

Write a function =cross= that takes a single integer parameter
=size=, and prints a diagonal cross of that dimension.

*** Example:
    :PROPERTIES:
    :CUSTOM_ID: example-2
    :END:

#+BEGIN_EXAMPLE
    Input size: 8

    Shape:
    *      *
     *    *
      *  *
       **
       **
      *  *
     *    *
    *      *
#+END_EXAMPLE

** Task D. Lower triangle
   :PROPERTIES:
   :CUSTOM_ID: task-d-lower-triangle
   :END:

Write a function =lower= that returns a string representing  bottom-left half of a
square, given an integer parameter representing side =length=.

*** Example:
    :PROPERTIES:
    :CUSTOM_ID: example-3
    :END:

#+BEGIN_EXAMPLE
    Input side length: 6

    Shape:
    *
    **
    ***
    ****
    *****
    ******
#+END_EXAMPLE

** Task E. Upper triangle
   :PROPERTIES:
   :CUSTOM_ID: task-e-upper-triangle
   :END:

Write a function =upper= that returns a string representing the top-right half of a square,
given the integer parameter side =length=.

*** Example:
    :PROPERTIES:
    :CUSTOM_ID: example-4
    :END:

#+BEGIN_EXAMPLE
    Input side length: 5

    Shape:
    *****
     ****
      ***
       **
        *
#+END_EXAMPLE

** Task F. Upside-down trapezoid
   :PROPERTIES:
   :CUSTOM_ID: task-f-upside-down-trapezoid
   :END:

Write a function =trapezoid= that returns a string representing an upside-down trapezoid of
given parameters  =width= and =height=.

However, if the input height is impossibly large for the given width,
then the program should return and empty string.

*** Example 1:
    :PROPERTIES:
    :CUSTOM_ID: example-1
    :END:

#+BEGIN_EXAMPLE
    Input width: 12
    Input height: 5

    Shape:
    ************
     **********
      ********
       ******
        ****
#+END_EXAMPLE

*** Example 2:
    :PROPERTIES:
    :CUSTOM_ID: example-2
    :END:

#+BEGIN_EXAMPLE
    Input width: 12
    Input height: 7

    Impossible shape!
#+END_EXAMPLE

*** Hint:
    :PROPERTIES:
    :CUSTOM_ID: hint-2
    :END:

You can start with the number of

#+BEGIN_EXAMPLE
    spaces = 0;
    stars = width;
#+END_EXAMPLE

On each line, print *that number of spaces* followed by *that number of
stars*. After that, the number of spaces gets incremented by 1, while
the number of stars gets decremented by 2:

#+BEGIN_EXAMPLE
    spaces += 1;
    stars -= 2;
#+END_EXAMPLE

** Task G. Checkerboard (3x3)
   :PROPERTIES:
   :CUSTOM_ID: task-g-checkerboard-3x3
   :END:

Write a function =checkerboard33= that takes integer paramters =width=
and =height= and returns a string representing a checkerboard of
3-by-3 squares. (It should work even if the input dimensions are not a
multiple of three.)

*** Example 1:
    :PROPERTIES:
    :CUSTOM_ID: example-1-1
    :END:

#+BEGIN_EXAMPLE
    Input width: 16
    Input height: 11

    Shape:
    ***   ***   ***
    ***   ***   ***
    ***   ***   ***
       ***   ***   *
       ***   ***   *
       ***   ***   *
    ***   ***   ***
    ***   ***   ***
    ***   ***   ***
       ***   ***   *
       ***   ***   *
#+END_EXAMPLE

*** Example 2:
    :PROPERTIES:
    :CUSTOM_ID: example-2-1
    :END:

#+BEGIN_EXAMPLE
    Input width: 27
    Input height: 27

    Shape:
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
       ***   ***   ***   ***   
       ***   ***   ***   ***   
       ***   ***   ***   ***   
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
       ***   ***   ***   ***   
       ***   ***   ***   ***   
       ***   ***   ***   ***   
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
       ***   ***   ***   ***   
       ***   ***   ***   ***   
       ***   ***   ***   ***   
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
       ***   ***   ***   ***   
       ***   ***   ***   ***   
       ***   ***   ***   ***   
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
    ***   ***   ***   ***   ***
#+END_EXAMPLE

