CSCI 136 - Lab 8

* Lab 8. A Pretty-printing / Automatic Style Program
  :PROPERTIES:
  :CUSTOM_ID: lab-8-a-pretty-printing--automatic-style-program
  :END:

[[https://i.imgur.com/mzGdpPJ.png]]

In this lab, we will develop a small utility program that can fix
indentation in C or C++ source code files. It will have some
limitations, but it will be able to cover a significant subset of valid
C++ programs. Specifically, given a file with messed up indentation
style:

#+BEGIN_EXAMPLE
                    int main(){ 
               // Hi, I'm a program!
    int x = 1; 
        for(int i = 0; i < 10; i++) {
    cout << i;
              cout << endl;
     }
        }
#+END_EXAMPLE

It will output a well-formatted program:

#+BEGIN_EXAMPLE
    int main(){
        // Hi, I'm a program!
        int x = 1; 
        for(int i = 0; i < 10; i++) {
            cout << i;
            cout << endl;
        } 
    }     
#+END_EXAMPLE

** Task A. Removing indentation
   :PROPERTIES:
   :CUSTOM_ID: task-a-removing-indentation
   :END:

Before we make a program that indents source code files, let's make a
program that unindents them.

Start by writing a function

#+BEGIN_EXAMPLE
    string removeLeadingSpaces(string line);
#+END_EXAMPLE

that takes one line of code as input and returns its copy /without
leading spaces and tabs/:

#+BEGIN_EXAMPLE
    removeLeadingSpaces("       int x = 1;  ") == "int x = 1;  "
#+END_EXAMPLE

Make use of the function
[[http://www.cplusplus.com/reference/cctype/isspace/][=isspace=]]
defined in =<cctype>= to check if a character is a whitespace. Your
function should probably iterate over the input string, skip all spaces,
and after it finds the first non-space character, start accumulating the
characters into a new string, which will be returned.

Write a program =unindent.cpp= that reads input from =cin= and prints
out each input line with leading spaces removed.

*** Example:
    :PROPERTIES:
    :CUSTOM_ID: example
    :END:

To test, create a badly indented file, for instance, called
=bad-code.cpp=:

#+BEGIN_EXAMPLE
                    int main(){
               // Hi, I'm a program!
    int x = 1; 
        for(int i = 0; i < 10; i++) {
    cout << i;
              cout << endl;
     }
        }
#+END_EXAMPLE

Since our =unindent= program reads its input from =cin=, the badly
indented text can be fed into it using standard input redirection:

#+BEGIN_EXAMPLE
    $ ./unindent < bad-code.cpp
    int main(){
    // Hi, I'm a program!
    int x = 1; 
    for(int i = 0; i < 10; i++) {
    cout << i;
    cout << endl;
    }
    }
#+END_EXAMPLE

** Task B. Counting blocks opened and closed by ={= and =}=, and adding
real indentation
   :PROPERTIES:
   :CUSTOM_ID: task-b-counting-blocks-opened-and-closed-by--and---and-adding-real-indentation
   :END:

To count open blocks, we need to count how many curly braces get opened
and closed on each line, so we need to count ={= and =}=

Write a function

#+BEGIN_EXAMPLE
    int countChar(string line, char c);
#+END_EXAMPLE

that scans the =line= and returns the number of occurrences of the
character =c=.

Write a new program =indent.cpp= that enhances the program from the
previous task. As it reads the input line by line, it should also count
the number of open and closed ={= =}= in it, and keep track of *how many
blocks is currently open at the beginning of each line*.

In the listing below, the number of open blocks is shown on the left:

#+BEGIN_EXAMPLE
    0   int main(){
    1   // Hi, I'm a program!
    1   int x = 1; 
    1   for(int i = 0; i < 10; i++) {
    2   cout << i;
    2   cout << endl;
    2   }
    1   }
#+END_EXAMPLE

Then instead of printing the number of open blocks, add that number of
tabs ='\t'= at the beginning of each line, and you will get:

#+BEGIN_EXAMPLE
    int main(){
        // Hi, I'm a program!
        int x = 1; 
        for(int i = 0; i < 10; i++) {
            cout << i;
            cout << endl;
            } // <-- closing for loop
        }     // <-- closing main
#+END_EXAMPLE

Notice that the closing curly braces are indented one level further than
what they should be.

To fix that, when indenting the line, check its very first character. If
it is a closing curly brace =}=, its indentation level should be reduced
by one:

#+BEGIN_EXAMPLE
    int main(){
        // Hi, I'm a program!
        int x = 1; 
        for(int i = 0; i < 10; i++) {
            cout << i;
            cout << endl;
        } 
    }     
#+END_EXAMPLE

** Shortcomings of our program:
   :PROPERTIES:
   :CUSTOM_ID: shortcomings-of-our-program
   :END:

- No support for loops and if statements that don't have curly braces.
  For example,

#+BEGIN_EXAMPLE
    if (c == 'A')
        s = s + c;
#+END_EXAMPLE

will be incorrectly indented as

#+BEGIN_EXAMPLE
    if (c == 'A')
    s = s + c;
#+END_EXAMPLE

- No support for =//= and =/* */=. Commented out curly braces should not
  affect indentation

- Symbols ={=, =}= inside =string= and =char= literals are
  misinterpreted as blocks

#+BEGIN_EXAMPLE
    if (true) {
        s = "{{";
        t = "ABC";
    }
#+END_EXAMPLE

will be incorrectly indented as

#+BEGIN_EXAMPLE
    if (true) {
        s = "{{";
                t = "ABC";
            }
#+END_EXAMPLE

** How to submit your programs
   :PROPERTIES:
   :CUSTOM_ID: how-to-submit-your-programs
   :END:

*** Each program should be submitted through Gradescope
    :PROPERTIES:
    :CUSTOM_ID: each-program-should-be-submitted-through-gradescope
    :END:

Write separate programs for each part of the assignment.\\
Submit only the source code (.cpp) files, not the compiled
executables.\\
Each program should start with a comment that contains your name and a
short program description, for example:

#+BEGIN_EXAMPLE
    /*
    Author: your name
    Course: CSCI-136
    Instructor: their name
    Assignment: title, e.g., Lab1A

    Here, briefly, at least in one or a few sentences
    describe what the program does.
    */
#+END_EXAMPLE

\\
